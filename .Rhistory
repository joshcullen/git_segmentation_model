grid_5f<- as.data.frame(grid_5, xy = TRUE)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat.spdf@data, aes(x=utmlong, y=utmlat, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#Load world map data
usa <- ne_states(country = "United States of America", returnclass = "sf")
fl<- usa %>% filter(name == "Florida") %>% st_transform(proj4string(dat.spdf))
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat.spdf@data, aes(x=utmlong, y=utmlat, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat.spdf@data, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
View(dat)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE)
View(grid_5f)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent")
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent")
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25)
View(dat.spdf)
View(dat.spdf@data)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d("ID", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d("ID", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
View(grid_5f)
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=layer)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_color_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
tab<- table(cellFromXY(grid_5, dat.spdf))
tab
grid_5[as.numeric(names(tab))] <- tab
grid_5f<- as.data.frame(grid_5, xy = TRUE)
names(grid_5f)[3]<- "count"
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_color_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_color_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_fill_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_fill_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Longitude", y = "Latitude") +
theme_bw()
library(tidyverse)
library(progress)
library(furrr)
library(tictoc)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
View(dat)
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
dat$id<- as.factor(dat$id)
names(dat)[4]<- "time"
dat$time<- as.POSIXct(strptime(dat$time, format = "%Y/%m/%d %H:%M:%S"))
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + y
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
library(adehabitatLT)
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + y
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(sp)
library(raster)
library(rgdal)
library(adehabitatLT)
dat$id<- as.factor(dat$id)
names(dat)[4]<- "time"
dat$time<- as.POSIXct(strptime(dat$time, format = "%Y/%m/%d %H:%M:%S"))
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + y
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
coordinates(dat.spdf)<- ~utmlong + utmlat
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
dat$id<- as.factor(dat$id)
names(dat)[4]<- "time"
dat$time<- as.POSIXct(strptime(dat$time, format = "%Y/%m/%d %H:%M:%S"))
#create class ltraj for SL/TA/NSD (i.e. dist, rel.angle, R2n)
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + utmlat
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
##Assign newly calculated vars to DF
dat<- ld(dat.traj) #turn ltraj object into DF
dat<- dat[,c(11,1:10)]
# 5 km w 1 cell buffer
grid_5<- raster(extent(dat.spdf) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- CRS("+init=epsg:32617")
grid_5[]<- 0
dat.spdf@data$grid.cell<- cellFromXY(grid_5, dat.spdf) #1067 cells occupied from possible 4992 cells
View(dat.spdf)
View(dat.spdf@data)
dat$grid.cell<- cellFromXY(grid_5, dat.spdf) #1067 cells occupied from possible 4992 cells
View(dat)
### Write to CSV for further analysis
write.csv(dat, "Snail Kite Gridded Data_larger.csv", row.names = F)
library(tidyverse)
library(progress)
library(furrr)
library(tictoc)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
View(dat)
dat.list<- df.to.list(dat = dat)
dat.list<- lapply(dat.list, function(x) x %>% mutate(time1 = 1:nrow(x)))  #add row for obs number
View(dat.list)
View(dat.list[["1"]])
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:nrow(x)))  #add row for obs number
View(dat.list)
dat.list[[1]] %>% nrow()
dat.list[[1]] %>% length()
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:length(x)))  #add row for obs number
View(dat.list)
View(dat.list[["1"]])
View(dat.list[["2"]])
dat.long<- map_dfr(dat.list, `[`) %>% dplyr::select(id, grid.cell, time1)  #create DF
View(dat.long)
names(dat.long)[2]<- "loc.id"
dat.long$loc.id<- dat.long$loc.id %>% factor()
levels(dat.long$loc.id)<- 1:length(unique(dat.long$loc.id))  #change from raw to modified cell ID
dat.long$loc.id<- dat.long$loc.id %>% as.character() %>% as.numeric()
dat.list2<- df.to.list(dat.long)
identity<- unique(dat.long$id)
ngibbs = 10000
## Run Gibbs sampler
plan(multiprocess)  #run all MCMC chains in parallel
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
dat.res<- space_segment(data = dat.list2, identity = identity, ngibbs = ngibbs)
1036/60
1035.843/60
#Number of breakpoints by ID
dat.res$brkpts[,-1] %>% apply(1, function(x) sum(!is.na(x)))
View(dat.res)
View(dat.res[["brkpts"]])
traceplot(data = dat.res$nbrks, type = "nbrks", identity = identity)
traceplot(data = dat.res$LML, type = "LML", identity = identity)
View(dat.list)
## Heatmaps
heatmap(data = dat.list2, identity = identity, dat.res = dat.res)
View(dat.res)
View(dat.res[["brkpts"]])
dat_out<- map(dat.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
setwd("~/Documents/Snail Kite Project/Data/R Scripts/activity_center1")
View(dat_out)
write.csv(dat_out, "Snail Kite Gridded Data_larger.csv", row.names = F)
library(tidyverse)
library(progress)
library(furrr)
library(tictoc)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
dat.list<- df.to.list(dat = dat)
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:length(x)))  #add row for obs number
dat.list[[1]]$time1 %>% max()
###############################
#### Load and Prepare Data ####
###############################
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
dat.list<- df.to.list(dat = dat)
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:length(x)))  #add row for obs number
dat.long<- map_dfr(dat.list, `[`) %>% dplyr::select(id, grid.cell, time1)  #create DF
names(dat.long)[2]<- "loc.id"
dat.long$loc.id<- dat.long$loc.id %>% factor()
levels(dat.long$loc.id)<- 1:length(unique(dat.long$loc.id))  #change from raw to modified cell ID
dat.long$loc.id<- dat.long$loc.id %>% as.character() %>% as.numeric()
dat.list2<- df.to.list(dat.long)
identity<- unique(dat.long$id)
ngibbs = 10000
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
View(dat)
View(dat.list)
View(dat.list[["1"]])
#check how many different grid cells occupied by ID
map(dat.list, function(x) x %>% unique(grid.cell))
#check how many different grid cells occupied by ID
map(dat.list, function(x) unique(x$grid.cell))
#check how many different grid cells occupied by ID
map(dat.list, function(x) unique(x$grid.cell) %>% length())
#select only IDs that occupy 3 or more grid cells
map(dat.list, function(x) which(unique(x$grid.cell) %>% length() >= 3))
#select only IDs that occupy 3 or more grid cells
map(dat.list, function(x) unique(x$grid.cell) %>% length()) %>% which(. >= 3)
dat<- dat %>% group_by(id) %>% filter(length(unique(grid.cell)) >= 3) %>% ungroup()
dat.list<- df.to.list(dat = dat)
View(dat.list)
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
#remove IDs w < 3 occupied grid cells
dat<- dat %>% group_by(id) %>% filter(length(unique(grid.cell)) >= 3) %>% ungroup()
dat.list<- df.to.list(dat = dat)
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:length(x)))  #add row for obs number
dat.long<- map_dfr(dat.list, `[`) %>% dplyr::select(id, grid.cell, time1)  #create DF
names(dat.long)[2]<- "loc.id"
dat.long$loc.id<- dat.long$loc.id %>% factor()
levels(dat.long$loc.id)<- 1:length(unique(dat.long$loc.id))  #change from raw to modified cell ID
dat.long$loc.id<- dat.long$loc.id %>% as.character() %>% as.numeric()
dat.list2<- df.to.list(dat.long)
identity<- unique(dat.long$id)
ngibbs = 10000
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
dat.res<- space_segment(data = dat.list2, identity = identity, ngibbs = ngibbs, brk.cols = 99)
1250.075/60
#Number of breakpoints by ID
dat.res$brkpts[,-1] %>% apply(1, function(x) sum(!is.na(x)))
plot.heatmap.loc(dat.list2[[1]],identity, dat.res)
#------------------------------------------------
plot.heatmap.loc=function(data, identity, dat.res) {
#re-define loc.id based only on those visited by this individual
uni.loc=unique(data$loc.id)
aux=data.frame(loc.id=uni.loc,loc.id1=1:length(uni.loc))
dat1=merge(data,aux,all=T)
dat1$loc.id=dat1$loc.id1
dat=dat1[order(dat1$time1),c('loc.id','time1')]
nloc<- length(uni.loc)
nobs<- nrow(data)
obs<- matrix(0, nobs, nloc)
for (i in 1:nrow(data)) {
obs[i, dat$loc.id[i]]<- 1
}
obs<- data.frame(obs)
names(obs)<- 1:nloc
obs.long<- obs %>% gather(key, value) %>% mutate(time=rep(1:nobs, times=nloc))
obs.long$key<- as.numeric(obs.long$key)
tmp=which(unique(data$id) == identity)
breakpt<- dat.res$brkpts[tmp,-1] %>% discard(is.na) %>% t() %>% data.frame()
names(breakpt)<- "breaks"
print(
ggplot(obs.long, aes(x=time, y=key, fill=value)) +
geom_tile() +
scale_fill_viridis_c(guide=F) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
geom_vline(data = breakpt, aes(xintercept = breaks), color = viridis(n=9)[7], size = 0.35) +
labs(x = "Observations", y = "Grid Cell") +
theme_bw() +
theme(axis.title = element_text(size = 18), axis.text = element_text(size = 16),
title = element_text(size = 20)) +
labs(title = paste("ID", unique(data$id)))
)
}
plot.heatmap.loc(dat.list2[[1]],identity, dat.res)
#------------------------------------------------
plot.heatmap.loc=function(data, identity, dat.res) {
#re-define loc.id based only on those visited by this individual
uni.loc=unique(data$loc.id)
aux=data.frame(loc.id=uni.loc,loc.id1=1:length(uni.loc))
dat1=merge(data,aux,all=T)
dat1$loc.id=dat1$loc.id1
dat=dat1[order(dat1$time1),c('loc.id','time1')]
nloc<- length(uni.loc)
nobs<- nrow(data)
obs<- matrix(0, nobs, nloc)
for (i in 1:nrow(data)) {
obs[i, dat$loc.id[i]]<- 1
}
obs<- data.frame(obs)
names(obs)<- 1:nloc
obs.long<- obs %>% gather(key, value) %>% mutate(time=rep(1:nobs, times=nloc))
obs.long$key<- as.numeric(obs.long$key)
tmp=which(unique(data$id) == identity)
breakpt<- dat.res$brkpts[tmp,-1] %>% discard(is.na) %>% t() %>% data.frame()
names(breakpt)<- "breaks"
print(
ggplot(obs.long, aes(x=time, y=key, fill=value)) +
geom_tile() +
scale_fill_viridis_c("Presence/Absence", guide=T) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
geom_vline(data = breakpt, aes(xintercept = breaks), color = viridis(n=9)[7], size = 0.35) +
labs(x = "Observations", y = "Grid Cell") +
theme_bw() +
theme(axis.title = element_text(size = 18), axis.text = element_text(size = 16),
title = element_text(size = 20)) +
labs(title = paste("ID", unique(data$id)))
)
}
plot.heatmap.loc(dat.list2[[1]],identity, dat.res)
data=dat.list2[[1]]
#re-define loc.id based only on those visited by this individual
uni.loc=unique(data$loc.id)
aux=data.frame(loc.id=uni.loc,loc.id1=1:length(uni.loc))
dat1=merge(data,aux,all=T)
dat1$loc.id=dat1$loc.id1
dat=dat1[order(dat1$time1),c('loc.id','time1')]
nloc<- length(uni.loc)
nobs<- nrow(data)
obs<- matrix(0, nobs, nloc)
for (i in 1:nrow(data)) {
obs[i, dat$loc.id[i]]<- 1
}
obs<- data.frame(obs)
names(obs)<- 1:nloc
obs.long<- obs %>% gather(key, value) %>% mutate(time=rep(1:nobs, times=nloc))
obs.long$key<- as.numeric(obs.long$key)
tmp=which(unique(data$id) == identity)
breakpt<- dat.res$brkpts[tmp,-1] %>% discard(is.na) %>% t() %>% data.frame()
names(breakpt)<- "breaks"
ggplot(obs.long, aes(x=time, y=key, fill=value)) +
geom_tile() +
scale_fill_viridis_c("Presence/Absence") +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
geom_vline(data = breakpt, aes(xintercept = breaks), color = viridis(n=9)[7], size = 0.35) +
labs(x = "Observations", y = "Grid Cell") +
theme_bw() +
theme(axis.title = element_text(size = 18), axis.text = element_text(size = 16),
title = element_text(size = 20)) +
labs(title = paste("ID", unique(data$id)))
str(obs.long)
obs.long$value<- factor(obs.long$value, levels = c("Absence","Presence"))
ggplot(obs.long, aes(x=time, y=key, fill=value)) +
geom_tile() +
scale_fill_viridis_d() +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
geom_vline(data = breakpt, aes(xintercept = breaks), color = viridis(n=9)[7], size = 0.35) +
labs(x = "Observations", y = "Grid Cell") +
theme_bw() +
theme(axis.title = element_text(size = 18), axis.text = element_text(size = 16),
title = element_text(size = 20)) +
labs(title = paste("ID", unique(data$id)))
uni.loc=unique(data$loc.id)
aux=data.frame(loc.id=uni.loc,loc.id1=1:length(uni.loc))
dat1=merge(data,aux,all=T)
dat1$loc.id=dat1$loc.id1
dat=dat1[order(dat1$time1),c('loc.id','time1')]
nloc<- length(uni.loc)
nobs<- nrow(data)
obs<- matrix(0, nobs, nloc)
for (i in 1:nrow(data)) {
obs[i, dat$loc.id[i]]<- 1
}
obs<- data.frame(obs)
names(obs)<- 1:nloc
obs.long<- obs %>% gather(key, value) %>% mutate(time=rep(1:nobs, times=nloc))
obs.long$key<- as.numeric(obs.long$key)
obs.long$value<- factor(obs.long$value, levels = c("Absence","Presence"))
str(obs.long)
View(obs.long)
uni.loc=unique(data$loc.id)
aux=data.frame(loc.id=uni.loc,loc.id1=1:length(uni.loc))
dat1=merge(data,aux,all=T)
dat1$loc.id=dat1$loc.id1
dat=dat1[order(dat1$time1),c('loc.id','time1')]
nloc<- length(uni.loc)
nobs<- nrow(data)
obs<- matrix(0, nobs, nloc)
for (i in 1:nrow(data)) {
obs[i, dat$loc.id[i]]<- 1
}
obs<- data.frame(obs)
names(obs)<- 1:nloc
obs.long<- obs %>% gather(key, value) %>% mutate(time=rep(1:nobs, times=nloc))
obs.long$key<- as.numeric(obs.long$key)
str(obs.long)
obs.long$value<- factor(obs.long$value)
str(obs.long)
levels(obs.long$value)<- c("Absence","Presence")
str(obs.long)
tmp=which(unique(data$id) == identity)
breakpt<- dat.res$brkpts[tmp,-1] %>% discard(is.na) %>% t() %>% data.frame()
names(breakpt)<- "breaks"
ggplot(obs.long, aes(x=time, y=key, fill=value)) +
geom_tile() +
scale_fill_viridis_d() +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
geom_vline(data = breakpt, aes(xintercept = breaks), color = viridis(n=9)[7], size = 0.35) +
labs(x = "Observations", y = "Grid Cell") +
theme_bw() +
theme(axis.title = element_text(size = 18), axis.text = element_text(size = 16),
title = element_text(size = 20)) +
labs(title = paste("ID", unique(data$id)))
ggplot(obs.long, aes(x=time, y=key, fill=value)) +
geom_tile() +
scale_fill_viridis_d("") +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
geom_vline(data = breakpt, aes(xintercept = breaks), color = viridis(n=9)[7], size = 0.35) +
labs(x = "Observations", y = "Grid Cell") +
theme_bw() +
theme(axis.title = element_text(size = 18), axis.text = element_text(size = 16),
title = element_text(size = 20)) +
labs(title = paste("ID", unique(data$id)))
ggsave("Spatial segmentation of space", width = 7, height = 5, units = "in", dpi = 72)
ggsave("Spatial segmentation of space.png", width = 7, height = 5, units = "in", dpi = 72)
ggsave("Spatial segmentation of space.png", width = 9, height = 5, units = "in", dpi = 300)
getwd()
