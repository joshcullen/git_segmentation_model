} else if (inherits(d,"sf")) {
ret <- list(a = c(sf::st_coordinates(d)[[1,1]], 0,
sf::st_coordinates(d)[[1,2]], 0))
}
ret
}
initial<- map(sf_locs[[2]], init_params)
# Set first val of 'fixpar' to 1 since we are providing error info; second and third are set to NA (for sigma and beta, respectively) to be estimated from model; sigma = velocity variation; beta = velocity autocorr
sf_locs <- sf_locs %>%
dplyr::mutate(
fixpar = rep(
list(c(1,NA,NA)),
nrow(.)
)
)
#wrapper function to fit model for each element of list
fit_crawl <- function(d, fixpar) {
fit <- crawl::crwMLE(
mov.model =  ~ 1,
err.model = list(x = ~1),
if (any(colnames(d) == "activity")) {
activity <- ~ I(activity)
} else {activity <- NULL},
fixPar = fixpar,
data = d,
method = "Nelder-Mead",
Time.name = "ESTtime",
initial.state = initial,
attempts = 8,
control = list(
trace = 0
),
initialSANN = list(
maxit = 1500,
trace = 0
)
)
fit
}
dat_fit <- sf_locs %>%
dplyr::mutate(fit = furrr::future_pmap(list(d = data,fixpar = fixpar),
fit_crawl, .progress = TRUE),
params = map(fit, crawl::tidy_crwFit))
### Process Imputation of Time Series ###
set.seed(123)
dat_fit <- sf_locs %>%
dplyr::mutate(fit = furrr::future_pmap(list(d = data,fixpar = fixpar),
fit_crawl, .progress = TRUE),
params = map(fit, crawl::tidy_crwFit))
### Process Imputation of Time Series ###
set.seed(1)
dat_fit <- sf_locs %>%
dplyr::mutate(fit = furrr::future_pmap(list(d = data,fixpar = fixpar),
fit_crawl, .progress = TRUE),
params = map(fit, crawl::tidy_crwFit))
summary(dat)
View(dat_red)
summary(dat_red)
View(sf_locs)
View(initial)
crwMLE
traceback()
dat_red[is.na(dat_red$ESTtime),]
dat_red[is.na(dat_red$utmlong),]
dat_red[is.na(dat_red$utmlat),]
dat_red[is.infinite(dat_red$utmlat),]
dat_red[is.infinite(dat_red$utmlong),]
summary(dat_red)
View(sf_locs)
View(sf_locs[[2]][[1]])
View(sf_locs[[2]][[18]])
dat<- read.csv("Snail Kite Gridded Data.csv", as.is = T)
dat$ESTtime<- as_datetime(dat$ESTtime)
dat_red<- dat %>% dplyr::select(id, ESTtime, utmlong, utmlat)
dat_red <- dat_red %>%
mutate(
error_semi_major_axis = 30,
error_semi_minor_axis = 30,
error_ellipse_orientation = 0
)
sf_locs <- st_as_sf(dat_red, coords = c("utmlong","utmlat")) %>% st_set_crs(32617)
future::plan(multisession)
sf_locs <- sf_locs %>%
dplyr::group_by(id) %>% dplyr::arrange(ESTtime) %>%
tidyr::nest() %>%
dplyr::mutate(data = furrr::future_map(data,sf::st_as_sf))
#define initial values for loc ('a') and 4x4 covar matrix of error ('P')
init_params <- function(d) {
if (any(colnames(d) == "x") && any(colnames(d) == "y")) {
ret <- list(a = c(d$x[1], 0,
d$y[1], 0),
P = diag(c(10 ^ 2, 10 ^ 2,
10 ^ 2, 10 ^ 2)))
} else if (inherits(d,"sf")) {
ret <- list(a = c(sf::st_coordinates(d)[[1,1]], 0,
sf::st_coordinates(d)[[1,2]], 0))
}
ret
}
initial<- map(sf_locs[[2]], init_params)
# Set first val of 'fixpar' to 1 since we are providing error info; second and third are set to NA (for sigma and beta, respectively) to be estimated from model; sigma = velocity variation; beta = velocity autocorr
sf_locs <- sf_locs %>%
dplyr::mutate(
fixpar = rep(
list(c(1,NA,NA)),
nrow(.)
)
)
dat_fit <- sf_locs %>%
dplyr::mutate(fit = furrr::future_pmap(list(d = data,fixpar = fixpar),
fit_crawl, .progress = TRUE),
params = map(fit, crawl::tidy_crwFit))
K <- 20
dat_fit <- dat_fit %>%
dplyr::mutate(sim_tracks = furrr::future_map(fit,
.get_sim_tracks,
iter = K,
.progress = TRUE))
dat_fit <- dat_fit %>%
dplyr::mutate(sim_lines = crawl::crw_as_sf(.$sim_tracks, ftype = "MULTILINESTRING",
locType = "p"))
sf_sim_lines <- do.call(rbind,dat_fit$sim_lines) %>% mutate(id = dat_fit$id)
#Plot lines with original data points
ggplot(data = sf_sim_lines) +
geom_sf(aes(color = as.factor(id)), size = 0.25, alpha = 1, show.legend = "line") +
geom_point(data = dat, aes(utmlong, utmlat), color = "grey45", alpha = 0.6) +
theme_bw() +
facet_wrap(~id) +
scale_color_discrete("ID", guide = guide_legend(override.aes = list(size = 1))) +
labs(x="Longitude", y="Latitude")
dat<- read.csv("Snail Kite Gridded Data_large.csv", as.is = T)
dat$ESTtime<- as_datetime(dat$ESTtime)
dat_red<- dat %>% dplyr::select(id, ESTtime, utmlong, utmlat) %>% filter(id = -28)
dat_red<- dat %>% dplyr::select(id, ESTtime, utmlong, utmlat) %>% filter(id == -28)
dat_red<- dat %>% dplyr::select(id, ESTtime, utmlong, utmlat) %>% filter(id == -c(28))
dat_red<- dat %>% dplyr::select(id, ESTtime, utmlong, utmlat) %>% filter(id != -28)
unique(dat$id)
dat_red<- dat %>% dplyr::select(id, ESTtime, utmlong, utmlat) %>% filter(id != 28)
dat_red <- dat_red %>%
mutate(
error_semi_major_axis = 30,
error_semi_minor_axis = 30,
error_ellipse_orientation = 0
)
sf_locs <- st_as_sf(dat_red, coords = c("utmlong","utmlat")) %>% st_set_crs(32617)
future::plan(multisession)
sf_locs <- sf_locs %>%
dplyr::group_by(id) %>% dplyr::arrange(ESTtime) %>%
tidyr::nest() %>%
dplyr::mutate(data = furrr::future_map(data,sf::st_as_sf))
initial<- map(sf_locs[[2]], init_params)
# Set first val of 'fixpar' to 1 since we are providing error info; second and third are set to NA (for sigma and beta, respectively) to be estimated from model; sigma = velocity variation; beta = velocity autocorr
sf_locs <- sf_locs %>%
dplyr::mutate(
fixpar = rep(
list(c(1,NA,NA)),
nrow(.)
)
)
dat_fit <- sf_locs %>%
dplyr::mutate(fit = furrr::future_pmap(list(d = data,fixpar = fixpar),
fit_crawl, .progress = TRUE),
params = map(fit, crawl::tidy_crwFit))
K <- 20
dat_fit <- dat_fit %>%
dplyr::mutate(sim_tracks = furrr::future_map(fit,
.get_sim_tracks,
iter = K,
.progress = TRUE))
# dat<- read.csv("birds for DV 01_2019.csv", header = T, sep = ",")
# dat<- read.csv("gps_pos_2019_04_01JC.csv", header = T, sep = ",")
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
setwd("~/Documents/Snail Kite Project/Data")
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(cowplot)
library(adehabitatLT)
# dat<- read.csv("birds for DV 01_2019.csv", header = T, sep = ",")
# dat<- read.csv("gps_pos_2019_04_01JC.csv", header = T, sep = ",")
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
View(dat)
#explore
str(dat)
summary(dat)
unique(dat$id) # number of IDs
unique(dat$id) %>% length() # number of IDs
dat$id<- as.factor(dat$id)
dat$ESTtime<- as.POSIXct(strptime(dat$ESTtime, format = "%Y/%m/%d %H:%M:%S"))
#explore
str(dat)
#create class ltraj for SL/TA/NSD (i.e. dist, rel.angle, R2n)
#Recalculate for all IDs
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + utmlat
plot(dat.spdf)
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
names(dat)
names(dat)[4]
names(dat)[4]<- "time"
names(dat)[4]
#create class ltraj for SL/TA/NSD (i.e. dist, rel.angle, R2n)
#Recalculate for all IDs
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + utmlat
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
plot(dat.traj)
dat.traj
View(dat.traj)
View(dat.traj[[1]])
dat.traj.df<- ld(dat.traj) #turn ltraj object into DF
View(dat.traj.df)
##Assign newly calculated vars to DF
dat<- ld(dat.traj) #turn ltraj object into DF
dat<- dat[,c(11,1:10)]
View(dat)
str(dat)
# 5 km w 1 cell buffer
grid_5<- raster(extent(dat.spdf) + 10000)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(sp)
library(raster)
library(rgdal)
library(adehabitatLT)
# 5 km w 1 cell buffer
grid_5<- raster(extent(dat.spdf) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- CRS("+init=epsg:32617")
grid_5[]<- 0
dat.spdf@data$grid.cell<- cellFromXY(grid_5, dat.spdf) #678 cells occupied from possible 4272 cells
dim(grid_5)
96*52
dat.spdf@data$grid.cell %>% unique() %>% length()
setwd("~/Documents/Snail Kite Project/Data/R Scripts/git_segmentation_model")
### Write to CSV for further analysis
write.csv(dat.spdf@data, "Snail Kite Gridded Data_larger.csv", row.names = F)
borders_5<- rasterToPolygons(grid_5, dissolve = F)
borders_5f<- fortify(borders_5)
grid_5f<- as.data.frame(grid_5, xy = TRUE)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat.spdf@data, aes(x=utmlong, y=utmlat, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#Load world map data
usa <- ne_states(country = "United States of America", returnclass = "sf")
fl<- usa %>% filter(name == "Florida") %>% st_transform(proj4string(dat.spdf))
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat.spdf@data, aes(x=utmlong, y=utmlat, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat.spdf@data, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
View(dat)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE)
View(grid_5f)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent")
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent")
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25)
View(dat.spdf)
View(dat.spdf@data)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d(alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y), fill="transparent") +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d("ID", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
geom_point(data = dat, aes(x=x, y=y, color=as.factor(id)), size=0.5, alpha=0.5) +
scale_color_viridis_d("ID", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
View(grid_5f)
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=layer)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_color_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
tab<- table(cellFromXY(grid_5, dat.spdf))
tab
grid_5[as.numeric(names(tab))] <- tab
grid_5f<- as.data.frame(grid_5, xy = TRUE)
names(grid_5f)[3]<- "count"
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_color_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_color_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_fill_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Easting", y = "Northing") +
theme_bw()
#plot density surface of points in grid
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$x-20000), max(dat$x+20000)),
ylim = c(min(dat$y-20000), max(dat$y+20000)), expand = FALSE) +
geom_tile(data=grid_5f, aes(x=x, y=y, fill=count)) +
geom_path(data = borders_5f, aes(x=long, y=lat, group=group), size=0.25) +
scale_fill_viridis_c("# of Observations", alpha = 0.6) +
labs(x = "Longitude", y = "Latitude") +
theme_bw()
library(tidyverse)
library(progress)
library(furrr)
library(tictoc)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
View(dat)
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
dat$id<- as.factor(dat$id)
names(dat)[4]<- "time"
dat$time<- as.POSIXct(strptime(dat$time, format = "%Y/%m/%d %H:%M:%S"))
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + y
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
library(adehabitatLT)
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + y
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(sp)
library(raster)
library(rgdal)
library(adehabitatLT)
dat$id<- as.factor(dat$id)
names(dat)[4]<- "time"
dat$time<- as.POSIXct(strptime(dat$time, format = "%Y/%m/%d %H:%M:%S"))
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + y
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
coordinates(dat.spdf)<- ~utmlong + utmlat
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
dat<- read.csv("gps_pos_2019_12_05JC.csv", header = T, sep = ",")
dat$id<- as.factor(dat$id)
names(dat)[4]<- "time"
dat$time<- as.POSIXct(strptime(dat$time, format = "%Y/%m/%d %H:%M:%S"))
#create class ltraj for SL/TA/NSD (i.e. dist, rel.angle, R2n)
dat.spdf<- dat
coordinates(dat.spdf)<- ~utmlong + utmlat
proj4string(dat.spdf)<- CRS("+init=epsg:32617")
dat.traj<- as.ltraj(xy = coordinates(dat.spdf), date = dat.spdf$time, id = dat.spdf$id)
##Assign newly calculated vars to DF
dat<- ld(dat.traj) #turn ltraj object into DF
dat<- dat[,c(11,1:10)]
# 5 km w 1 cell buffer
grid_5<- raster(extent(dat.spdf) + 10000)
res(grid_5)<- 5000
proj4string(grid_5)<- CRS("+init=epsg:32617")
grid_5[]<- 0
dat.spdf@data$grid.cell<- cellFromXY(grid_5, dat.spdf) #1067 cells occupied from possible 4992 cells
View(dat.spdf)
View(dat.spdf@data)
dat$grid.cell<- cellFromXY(grid_5, dat.spdf) #1067 cells occupied from possible 4992 cells
View(dat)
### Write to CSV for further analysis
write.csv(dat, "Snail Kite Gridded Data_larger.csv", row.names = F)
library(tidyverse)
library(progress)
library(furrr)
library(tictoc)
library(viridis)
source('gibbs functions2.R')
source('helper functions.R')
source('gibbs sampler2.R')
dat<- read.csv("Snail Kite Gridded Data_larger.csv", header = T, sep = ",")
View(dat)
dat.list<- df.to.list(dat = dat)
dat.list<- lapply(dat.list, function(x) x %>% mutate(time1 = 1:nrow(x)))  #add row for obs number
View(dat.list)
View(dat.list[["1"]])
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:nrow(x)))  #add row for obs number
View(dat.list)
dat.list[[1]] %>% nrow()
dat.list[[1]] %>% length()
dat.list<- map(dat.list, function(x) x %>% mutate(time1 = 1:length(x)))  #add row for obs number
View(dat.list)
View(dat.list[["1"]])
View(dat.list[["2"]])
dat.long<- map_dfr(dat.list, `[`) %>% dplyr::select(id, grid.cell, time1)  #create DF
View(dat.long)
names(dat.long)[2]<- "loc.id"
dat.long$loc.id<- dat.long$loc.id %>% factor()
levels(dat.long$loc.id)<- 1:length(unique(dat.long$loc.id))  #change from raw to modified cell ID
dat.long$loc.id<- dat.long$loc.id %>% as.character() %>% as.numeric()
dat.list2<- df.to.list(dat.long)
identity<- unique(dat.long$id)
ngibbs = 10000
## Run Gibbs sampler
plan(multiprocess)  #run all MCMC chains in parallel
## Run Gibbs sampler
plan(multisession)  #run all MCMC chains in parallel
dat.res<- space_segment(data = dat.list2, identity = identity, ngibbs = ngibbs)
1036/60
1035.843/60
#Number of breakpoints by ID
dat.res$brkpts[,-1] %>% apply(1, function(x) sum(!is.na(x)))
View(dat.res)
View(dat.res[["brkpts"]])
traceplot(data = dat.res$nbrks, type = "nbrks", identity = identity)
traceplot(data = dat.res$LML, type = "LML", identity = identity)
View(dat.list)
## Heatmaps
heatmap(data = dat.list2, identity = identity, dat.res = dat.res)
View(dat.res)
View(dat.res[["brkpts"]])
dat_out<- map(dat.list, assign.time.seg) %>% map_dfr(`[`)  #assign time seg and make as DF
setwd("~/Documents/Snail Kite Project/Data/R Scripts/activity_center1")
View(dat_out)
write.csv(dat_out, "Snail Kite Gridded Data_larger.csv", row.names = F)
